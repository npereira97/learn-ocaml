logged <"(* Checking if a number is even *)
let even x =
    x mod 2 = 0
let rec fast_exp x k =
  if k = 0 then 1
  else if even k then fast_exp (x * x) (k / 2)
  else
    let n = fast_exp x (k - 1) in
    x * n

let rec fast_exp_aux x k acc =
  if k = 0 then acc
  else if even k then fast_exp_aux (x * x) (k / 2) acc
  else fast_exp_aux x (k - 1) (x * acc)

      

let _ = 1 + 1
let fast_exp_tl x k =
  fast_exp_aux x k 1
">

Converted to sexp :)
Reply <((Section((Text" Resource analysis report "))((Message((Text"(* Checking if a number is even *)\nlet even x =\n    x mod 2 = 0\nlet rec fast_exp x k =\n  if k = 0 then 1\n  else if even k then fast_exp (x * x) (k / 2)\n  else\n    let n = fast_exp x (k - 1) in\n    x * n\n\nlet rec fast_exp_aux x k acc =\n  if k = 0 then acc\n  else if even k then fast_exp_aux (x * x) (k / 2) acc\n  else fast_exp_aux x (k - 1) (x * acc)\n\n      \n\nlet _ = 1 + 1\nlet fast_exp_tl x k =\n  fast_exp_aux x k 1\n\n\nYou ran the grader 9 times "))Informative))))>

logged <"(* Checking if a number is even *)
let even x =
    x mod 2 = 0
let rec fast_exp x k =
  if k = 0 then 1
  else if even k then fast_exp (x * x) (k / 2)
  else
    let n = fast_exp x (k - 1) in
    x * n

let rec fast_exp_aux x k acc =
  if k = 0 then acc
  else if even k then fast_exp_aux (x * x) (k / 2) acc
  else fast_exp_aux x (k - 1) (x * acc)

let fast_exp_tl x k =
  fast_exp_aux x k 1
">

Converted to sexp :)
Reply <((Section((Text" Resource analysis report "))((Message((Text"(* Checking if a number is even *)\nlet even x =\n    x mod 2 = 0\nlet rec fast_exp x k =\n  if k = 0 then 1\n  else if even k then fast_exp (x * x) (k / 2)\n  else\n    let n = fast_exp x (k - 1) in\n    x * n\n\nlet rec fast_exp_aux x k acc =\n  if k = 0 then acc\n  else if even k then fast_exp_aux (x * x) (k / 2) acc\n  else fast_exp_aux x (k - 1) (x * acc)\n\nlet fast_exp_tl x k =\n  fast_exp_aux x k 1\n\n\nYou ran the grader 10 times "))Informative))))>

logged <"(* Checking if a number is even *)
let even x =
    x mod 2 = 0
let rec fast_exp x k =
  if k = 0 then 1
  else if even k then fast_exp (x * x) (k / 2)
  else
    let n = fast_exp x (k - 1) in
    x * n

let rec fast_exp_aux x k acc =
  if k = 0 then acc
  else if even k then fast_exp_aux (x * x) (k / 2) acc
  else fast_exp_aux x (k - 1) (x * acc)

let fast_exp_tl x k =
  fast_exp_aux x k 1
">

Converted to sexp :)
Reply <((Section((Text" Resource analysis report "))((Message((Text"(* Checking if a number is even *)\nlet even x =\n    x mod 2 = 0\nlet rec fast_exp x k =\n  if k = 0 then 1\n  else if even k then fast_exp (x * x) (k / 2)\n  else\n    let n = fast_exp x (k - 1) in\n    x * n\n\nlet rec fast_exp_aux x k acc =\n  if k = 0 then acc\n  else if even k then fast_exp_aux (x * x) (k / 2) acc\n  else fast_exp_aux x (k - 1) (x * acc)\n\nlet fast_exp_tl x k =\n  fast_exp_aux x k 1\n\n\nYou ran the grader 11 times "))Informative))))>

logged <"(* Checking if a number is even *)
let even x =
    x mod 2 = 0
let rec fast_exp x k =
  if k = 0 then 1
  else if even k then fast_exp (x * x) (k / 2)
  else
    let n = fast_exp x (k - 1) in
    x * n

let rec fast_exp_aux x k acc =
  if k = 0 then acc
  else if even k then fast_exp_aux (x * x) (k / 2) acc
  else fast_exp_aux x (k - 1) (x * acc)

let fast_exp_tl x k =
  fast_exp_aux x k 1
">

Converted to sexp :)
Reply <((Section((Text" Resource analysis report "))((Message((Text"(* Checking if a number is even *)\nlet even x =\n    x mod 2 = 0\nlet rec fast_exp x k =\n  if k = 0 then 1\n  else if even k then fast_exp (x * x) (k / 2)\n  else\n    let n = fast_exp x (k - 1) in\n    x * n\n\nlet rec fast_exp_aux x k acc =\n  if k = 0 then acc\n  else if even k then fast_exp_aux (x * x) (k / 2) acc\n  else fast_exp_aux x (k - 1) (x * acc)\n\nlet fast_exp_tl x k =\n  fast_exp_aux x k 1\n\n\nYou ran the grader 12 times "))Informative))))>

logged <"(* Checking if a number is even *)
let even x =
    x mod 2 = 0
let rec fast_exp x k =
  if k = 0 then 1
  else if even k then fast_exp (x * x) (k / 2)
  else
    let n = fast_exp x (k - 1) in
    x * n

let rec fast_exp_aux x k acc =
  if k = 0 then acc
  else if even k then fast_exp_aux (x * x) (k / 2) acc
  else fast_exp_aux x (k - 1) (x * acc)

      

let _ = 1 + 1
let fast_exp_tl x k =
  fast_exp_aux x k 1
">

Converted to sexp :)
Reply <((Section((Text" Resource analysis report "))((Message((Text"(* Checking if a number is even *)\nlet even x =\n    x mod 2 = 0\nlet rec fast_exp x k =\n  if k = 0 then 1\n  else if even k then fast_exp (x * x) (k / 2)\n  else\n    let n = fast_exp x (k - 1) in\n    x * n\n\nlet rec fast_exp_aux x k acc =\n  if k = 0 then acc\n  else if even k then fast_exp_aux (x * x) (k / 2) acc\n  else fast_exp_aux x (k - 1) (x * acc)\n\n      \n\nlet _ = 1 + 1\nlet fast_exp_tl x k =\n  fast_exp_aux x k 1\n\n\nYou ran the grader 13 times "))Informative))))>

logged <"(* Checking if a number is even *)
let even x =
    x mod 2 = 0
let rec fast_exp x k =
  if k = 0 then 1
  else if even k then fast_exp (x * x) (k / 2)
  else
    let n = fast_exp x (k - 1) in
    x * n

let rec fast_exp_aux x k acc =
  if k = 0 then acc
  else if even k then fast_exp_aux (x * x) (k / 2) acc
  else fast_exp_aux x (k - 1) (x * acc)

let fast_exp_tl x k =
  fast_exp_aux x k 1
">

Converted to sexp :)
Reply <((Section((Text" Resource analysis report "))((Message((Text"(* Checking if a number is even *)\nlet even x =\n    x mod 2 = 0\nlet rec fast_exp x k =\n  if k = 0 then 1\n  else if even k then fast_exp (x * x) (k / 2)\n  else\n    let n = fast_exp x (k - 1) in\n    x * n\n\nlet rec fast_exp_aux x k acc =\n  if k = 0 then acc\n  else if even k then fast_exp_aux (x * x) (k / 2) acc\n  else fast_exp_aux x (k - 1) (x * acc)\n\nlet fast_exp_tl x k =\n  fast_exp_aux x k 1\n\n\nYou ran the grader 14 times "))Informative))))>

logged <"(* Checking if a number is even *)
let even x =
    x mod 2 = 0
let rec fast_exp x k =
  if k = 0 then 1
  else if even k then fast_exp (x * x) (k / 2)
  else
    let n = fast_exp x (k - 1) in
    x * n

let rec fast_exp_aux x k acc =
  if k = 0 then acc
  else if even k then fast_exp_aux (x * x) (k / 2) acc
  else fast_exp_aux x (k - 1) (x * acc)

      

let _ = 1 + 1
let fast_exp_tl x k =
  fast_exp_aux x k 1
">

Converted to sexp :)
Reply <((Section((Text" Resource analysis report "))((Message((Text"(* Checking if a number is even *)\nlet even x =\n    x mod 2 = 0\nlet rec fast_exp x k =\n  if k = 0 then 1\n  else if even k then fast_exp (x * x) (k / 2)\n  else\n    let n = fast_exp x (k - 1) in\n    x * n\n\nlet rec fast_exp_aux x k acc =\n  if k = 0 then acc\n  else if even k then fast_exp_aux (x * x) (k / 2) acc\n  else fast_exp_aux x (k - 1) (x * acc)\n\n      \n\nlet _ = 1 + 1\nlet fast_exp_tl x k =\n  fast_exp_aux x k 1\n\n\nYou ran the grader 15 times "))Informative))))>

logged <"(* Checking if a number is even *)
let even x =
    x mod 2 = 0
let rec fast_exp x k =
  if k = 0 then 1
  else if even k then fast_exp (x * x) (k / 2)
  else
    let n = fast_exp x (k - 1) in
    x * n

let rec fast_exp_aux x k acc =
  if k = 0 then acc
  else if even k then fast_exp_aux (x * x) (k / 2) acc
  else fast_exp_aux x (k - 1) (x * acc)

let fast_exp_tl x k =
  fast_exp_aux x k 1
">

Converted to sexp :)
Reply <((Section((Text" Resource analysis report "))((Message((Text"(* Checking if a number is even *)\nlet even x =\n    x mod 2 = 0\nlet rec fast_exp x k =\n  if k = 0 then 1\n  else if even k then fast_exp (x * x) (k / 2)\n  else\n    let n = fast_exp x (k - 1) in\n    x * n\n\nlet rec fast_exp_aux x k acc =\n  if k = 0 then acc\n  else if even k then fast_exp_aux (x * x) (k / 2) acc\n  else fast_exp_aux x (k - 1) (x * acc)\n\nlet fast_exp_tl x k =\n  fast_exp_aux x k 1\n\n\nYou ran the grader 16 times "))Informative))))>

logged <"exception NotImplemented

(* Type of a binary tree *)
type tree =
  | Empty
  | Node of tree * int * tree

(* An example binary tree *)
let t = Node (
    Node (Empty, 1, Empty),
    2,
    Node (Empty, 3, Empty)
  )
let rec size t =
  raise NotImplemented

let size_tests = [
  (* A test case is an input/output pair.
     This test case asserts that the output of `size Empty` should be `0`.
  *)
  (Empty, 0);
  (* Your additional test cases go here. *)
]

let rec height t =
  raise NotImplemented

let height_tests = [
  (* Your test cases go here. *)
]

let rec num_leaves t =
  raise NotImplemented

let num_leaves_tests = [
  (* Your test cases go here. *)
]
">

Converted to sexp :)
Reply <((Section((Text" Resource analysis report "))((Message((Text"exception NotImplemented\n\n(* Type of a binary tree *)\ntype tree =\n  | Empty\n  | Node of tree * int * tree\n\n(* An example binary tree *)\nlet t = Node (\n    Node (Empty, 1, Empty),\n    2,\n    Node (Empty, 3, Empty)\n  )\nlet rec size t =\n  raise NotImplemented\n\nlet size_tests = [\n  (* A test case is an input/output pair.\n     This test case asserts that the output of `size Empty` should be `0`.\n  *)\n  (Empty, 0);\n  (* Your additional test cases go here. *)\n]\n\nlet rec height t =\n  raise NotImplemented\n\nlet height_tests = [\n  (* Your test cases go here. *)\n]\n\nlet rec num_leaves t =\n  raise NotImplemented\n\nlet num_leaves_tests = [\n  (* Your test cases go here. *)\n]\n\n\nYou ran the grader 1 times "))Informative))))>

logged <"exception NotImplemented

(* Type of a binary tree *)
type tree =
  | Empty
  | Node of tree * int * tree

(* An example binary tree *)
let t = Node (
    Node (Empty, 1, Empty),
    2,
    Node (Empty, 3, Empty)
  )
let rec size t =
  raise NotImplemented

let size_tests = [
  (* A test case is an input/output pair.
     This test case asserts that the output of `size Empty` should be `0`.
  *)
  (Empty, 0);
  (* Your additional test cases go here. *)
]

let rec height t =
  raise NotImplemented

let height_tests = [
  (* Your test cases go here. *)
]

let rec num_leaves t =
  raise NotImplemented

let num_leaves_tests = [
  (* Your test cases go here. *)
]
">

Converted to sexp :)
Reply <((Section((Text" Resource analysis report "))((Message((Text"exception NotImplemented\n\n(* Type of a binary tree *)\ntype tree =\n  | Empty\n  | Node of tree * int * tree\n\n(* An example binary tree *)\nlet t = Node (\n    Node (Empty, 1, Empty),\n    2,\n    Node (Empty, 3, Empty)\n  )\nlet rec size t =\n  raise NotImplemented\n\nlet size_tests = [\n  (* A test case is an input/output pair.\n     This test case asserts that the output of `size Empty` should be `0`.\n  *)\n  (Empty, 0);\n  (* Your additional test cases go here. *)\n]\n\nlet rec height t =\n  raise NotImplemented\n\nlet height_tests = [\n  (* Your test cases go here. *)\n]\n\nlet rec num_leaves t =\n  raise NotImplemented\n\nlet num_leaves_tests = [\n  (* Your test cases go here. *)\n]\n\n\nYou ran the grader 1 times "))Informative))))>

logged <"exception NotImplemented

(* Type of a binary tree *)
type tree =
  | Empty
  | Node of tree * int * tree

(* An example binary tree *)
let t = Node (
    Node (Empty, 1, Empty),
    2,
    Node (Empty, 3, Empty)
  )
let _ = 1 + 1 + 1

let rec size t =
  raise NotImplemented

let size_tests = [
  (* A test case is an input/output pair.
     This test case asserts that the output of `size Empty` should be `0`.
  *)
  (Empty, 0);
  (* Your additional test cases go here. *)
]

let rec height t =
  raise NotImplemented

let height_tests = [
  (* Your test cases go here. *)
]

let rec num_leaves t =
  raise NotImplemented

let num_leaves_tests = [
  (* Your test cases go here. *)
]
">

Converted to sexp :)
Reply <((Section((Text" Resource analysis report "))((Message((Text"exception NotImplemented\n\n(* Type of a binary tree *)\ntype tree =\n  | Empty\n  | Node of tree * int * tree\n\n(* An example binary tree *)\nlet t = Node (\n    Node (Empty, 1, Empty),\n    2,\n    Node (Empty, 3, Empty)\n  )\nlet _ = 1 + 1 + 1\n\nlet rec size t =\n  raise NotImplemented\n\nlet size_tests = [\n  (* A test case is an input/output pair.\n     This test case asserts that the output of `size Empty` should be `0`.\n  *)\n  (Empty, 0);\n  (* Your additional test cases go here. *)\n]\n\nlet rec height t =\n  raise NotImplemented\n\nlet height_tests = [\n  (* Your test cases go here. *)\n]\n\nlet rec num_leaves t =\n  raise NotImplemented\n\nlet num_leaves_tests = [\n  (* Your test cases go here. *)\n]\n\n\nYou ran the grader 2 times "))Informative))))>

logged <"exception NotImplemented

(* Type of a binary tree *)
type tree =
  | Empty
  | Node of tree * int * tree

(* An example binary tree *)
let t = Node (
    Node (Empty, 1, Empty),
    2,
    Node (Empty, 3, Empty)
  )
let _ = 1 + 1 + 1

let rec size t =
  raise NotImplemented

let size_tests = [
  (* A test case is an input/output pair.
     This test case asserts that the output of `size Empty` should be `0`.
  *)
  (Empty, 0);
  (* Your additional test cases go here. *)
]

let rec height t =
  raise NotImplemented

let height_tests = [
  (* Your test cases go here. *)
]

let rec num_leaves t =
  raise NotImplemented

let num_leaves_tests = [
  (* Your test cases go here. *)
]
">

Converted to sexp :)
Reply <((Section((Text" Resource analysis report "))((Message((Text"exception NotImplemented\n\n(* Type of a binary tree *)\ntype tree =\n  | Empty\n  | Node of tree * int * tree\n\n(* An example binary tree *)\nlet t = Node (\n    Node (Empty, 1, Empty),\n    2,\n    Node (Empty, 3, Empty)\n  )\nlet _ = 1 + 1 + 1\n\nlet rec size t =\n  raise NotImplemented\n\nlet size_tests = [\n  (* A test case is an input/output pair.\n     This test case asserts that the output of `size Empty` should be `0`.\n  *)\n  (Empty, 0);\n  (* Your additional test cases go here. *)\n]\n\nlet rec height t =\n  raise NotImplemented\n\nlet height_tests = [\n  (* Your test cases go here. *)\n]\n\nlet rec num_leaves t =\n  raise NotImplemented\n\nlet num_leaves_tests = [\n  (* Your test cases go here. *)\n]\n\n\nYou ran the grader 1 times "))Informative))))>

logged <"23098098">

Converted to sexp :)
Reply <((Section((Text" Resource analysis report "))((Message((Text"23098098\n\nYou ran the grader 1 times "))Informative))))>

logged <"23098098">

Converted to sexp :)
Reply <((Section((Text" Resource analysis report "))((Message((Text"23098098\n\nYou ran the grader 1 times "))Informative))))>

logged <"23098098">

Converted to sexp :)
Reply <((Section((Text" Resource analysis report "))((Message((Text"23098098\n\nYou ran the grader 2 times "))Informative))))>

logged <"23098098">

Converted to sexp :)
Reply <((Section((Text" Resource analysis report "))((Message((Text"23098098\n\nYou ran the grader 3 times "))Informative))))>

logged <"23098098">

Converted to sexp :)
Reply <((Section((Text" Resource analysis report "))((Message((Text"23098098\n\nYou ran the grader 1 times "))Informative))))>

logged <"23098098">

Converted to sexp :)
Reply <((Section((Text" Resource analysis report "))((Message((Text"23098098\n\nYou ran the grader 1 times "))Informative))))>

logged <"23098098">

Converted to sexp :)
Reply <((Section((Text" Resource analysis report "))((Message((Text"23098098\n\nYou ran the grader 2 times "))Informative))))>

logged <"23098098">

Converted to sexp :)
Reply <((Section((Text" Resource analysis report "))((Message((Text"23098098\n\nYou ran the grader 3 times "))Informative))))>

